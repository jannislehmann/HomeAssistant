---
substitutions:
  device: nspanel-living
  mac: '3c:e9:0e:85:d4:dc'

packages:
  main_base: !include common/main_base.yaml

esp32:
  board: esp32dev
  framework:
    # ESP-IDF is requried so we can access the NSPanel PSRAM
    # which is on non-standard pins. ESP-IDF also uses less flash than Arduino!
    type: esp-idf

external_components:
  - source:
      type: git
      url: https://github.com/olicooper/esphome-nspanel-lovelace-native
      ref: dev
    refresh: 3h
    components: [nspanel_lovelace]

nspanel_lovelace:
  id: nspanel
  sleep_timeout: 10
  locale:
    language: de
    temperature_unit: celcius
  screensaver:
    time_id: homeassistant_time
    weather:
      entity_id: sensor.weather_forecast_daily
    # status_icon_left:
    #   entity_id: sensor.tibber_0100100700ff
    #   icon: flash
    # status_icon_right:
    #   entity_id: light.front_room_outer
    #   icon:
    #     value: robot-outline
    #     color: 200
  cards:
    - type: cardMedia
      id: media_card
      title: Receiver
      media_entity_id: media_player.avr
      entities:
        - entity_id: script.tv_hdmi_nintendoswitch
          icon: nintendo-game-boy
          name: TV Nintendo Switch
        - entity_id: script.tv_hdmi_playstation
          icon: google-controller
          name: TV PlayStation 5
        - entity_id: script.play_denon_coffee_music
          name: KÃ¤the
          icon: coffee

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: Europe/Berlin
    on_time:
      ## At midnight
      - seconds: 0
        minutes: 0
        hours: 0
        then:
          - lambda: 'id(nspanel).set_display_dim(1, 50);'
      ## At 8:00 PM
      - seconds: 0
        minutes: 0
        hours: 20
        then:
          - lambda: 'id(nspanel).set_display_dim(10, 50);'
      ## At 7:00 AM
      - seconds: 0
        minutes: 0
        hours: 7
        then:
          - lambda: 'id(nspanel).set_display_dim(10, 50);'

logger:
  baud_rate: 115200

api:
  services:
    ## Service to update the TFT firmware using a URL that is accessible to the nspanel
    - service: upload_tft
      variables:
        url: string
      then:
        - lambda: 'id(nspanel).upload_tft(url);'
    ## Service to display a notification on the screensaver
    - service: notify_on_screensaver
      variables:
        heading: string
        message: string
        ## Set to 0 (or remove) to keep message until screensaver refreshes
        timeout_ms: int
      then:
        - lambda: 'id(nspanel).notify_on_screensaver(heading, message, timeout_ms);'
        - rtttl.play: 'scale_up:d=32,o=5,b=100:c,c#,d#,e,f#,g#,a#,b'

## UART for the Nextion display
uart:
  id: uart_nextion
  tx_pin: 16
  rx_pin: 17
  baud_rate: 115200

switch:
  - platform: gpio
    id: panel_power
    entity_category: config
    pin:
      number: 4
      inverted: true
    restore_mode: ALWAYS_ON
  - platform: gpio
    name: $device Relay 1
    id: relay_1
    pin:
      number: 22
  - platform: gpio
    name: $device Relay 2
    id: relay_2
    pin:
      number: 19

binary_sensor:
  ## Left button below the display
  - platform: gpio
    name: $device Left Button
    pin:
      number: GPIO14
      inverted: true
    id: left_button
    internal: true
    on_click:
      - homeassistant.service:
          service: media_player.media_play_pause
          data:
            entity_id: media_player.apple_tv
  ## Right button below the display
  - platform: gpio
    name: $device Right Button
    pin:
      number: GPIO27
      inverted: true
    id: right_button
    internal: true
    on_click:
      - switch.toggle: relay_1

button:
  - platform: restart
    id: restart_switch
    name: Restart

output:
  ## Buzzer for playing tones
  - platform: ledc
    id: buzzer_out
    pin: 21

## Rtttl function for buzzer
rtttl:
  id: buzzer
  output: buzzer_out